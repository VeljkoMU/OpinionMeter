{"ast":null,"code":"import { shareReplay, Subject } from 'rxjs';\nimport { changeCurrentPageAction } from 'src/store/actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user-data-manager.service\";\nimport * as i3 from \"@ngrx/store\";\nexport let PostServiceService = /*#__PURE__*/(() => {\n  class PostServiceService {\n    constructor(httpClient, userService, store) {\n      this.httpClient = httpClient;\n      this.userService = userService;\n      this.store = store;\n      this.posts = [];\n      this.postsObserver = new Subject();\n      this.currentTag = \"general\";\n      this.pageNum = 1;\n    }\n\n    getPostsByTag(tag, pageNum) {\n      let ret = this.httpClient.get(`/posts/getPostsByTag?tag=${tag}&pageNum=${pageNum}`, {\n        withCredentials: false\n      }).pipe(shareReplay(1));\n      ret.subscribe(data => {\n        console.log(data.docs);\n        this.posts = data.docs;\n        this.pageNum = data.currentPage;\n        this.postsObserver.next(this.posts);\n        const pageingData = {\n          currentPage: data.currentPage,\n          hasNextPage: data.hasNextPage,\n          hasPrevPage: data.hasPrevPage\n        };\n        this.store.dispatch(changeCurrentPageAction({\n          pagingData: pageingData\n        }));\n      });\n      this.currentTag = tag;\n      return ret;\n    }\n\n    getPostsByUser(user) {\n      let ret = this.httpClient.get(`/posts/getPostsFromuser?user=${user}`, {\n        withCredentials: true\n      }).pipe(shareReplay(1));\n      ret.subscribe(data => {\n        this.posts = data;\n        console.log(data);\n        this.postsObserver.next(this.posts);\n      });\n      return ret;\n    }\n\n    ratePost(isPositive, id) {\n      return this.httpClient.post(\"/posts/rate\", {\n        _id: id,\n        isPositive: isPositive,\n        username: this.userService.username\n      }, {\n        withCredentials: true\n      });\n    }\n\n    addComment(id, comment) {\n      return this.httpClient.post(\"/posts/addComment\", {\n        _id: id,\n        user: comment.user,\n        commentText: comment.commentText\n      }, {\n        withCredentials: true\n      });\n    }\n\n    getMostEngagedWithPosts() {\n      const posts = this.httpClient.get(\"/posts/mostEngagedWith\", {\n        withCredentials: false\n      }).pipe(shareReplay(1));\n      return posts;\n    }\n\n    addPost(user, text, link, tag) {\n      let ret = this.httpClient.post(\"/posts/addPost\", {\n        user: user,\n        post: text,\n        tag: tag,\n        link: link\n      }, {\n        observe: \"response\",\n        withCredentials: true\n      });\n      this.getPostsByTag(this.currentTag, this.pageNum).subscribe(data => this.posts = data);\n      return ret;\n    }\n\n    deletePost(id) {\n      return this.httpClient.delete(`/posts/deletePost?_id=${id}`, {\n        observe: \"response\",\n        withCredentials: true\n      });\n    }\n\n    rateComment(cid, pid, isPositive) {\n      let user = this.userService.username;\n      return this.httpClient.put(`/posts/rateComment`, {\n        user: user,\n        postid: pid,\n        commentid: cid,\n        isPositive: isPositive\n      });\n    }\n\n  }\n\n  PostServiceService.ɵfac = function PostServiceService_Factory(t) {\n    return new (t || PostServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserDataManagerService), i0.ɵɵinject(i3.Store));\n  };\n\n  PostServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostServiceService,\n    factory: PostServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return PostServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}