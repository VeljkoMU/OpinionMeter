{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { map, mergeMap } from \"rxjs\";\nimport { changeMostEngagedWithPostsAction, changePostsAction, changeUserPostsAction, getMostEngagedWithPostsAction, getPageResults, getPostsByTagAction, getpostsByUserAction } from \"./actions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/user-data-manager.service\";\nimport * as i2 from \"src/app/services/post-service.service\";\nimport * as i3 from \"@ngrx/effects\";\nexport let AppEffects = /*#__PURE__*/(() => {\n  class AppEffects {\n    constructor(userDataService, postsService, actions$) {\n      this.userDataService = userDataService;\n      this.postsService = postsService;\n      this.actions$ = actions$;\n      this.loadPostsEffect$ = createEffect(() => {\n        return this.actions$.pipe(ofType(getPostsByTagAction), mergeMap(request => this.postsService.getPostsByTag(request.tag, request.pageNum).pipe(map(posts => changePostsAction({\n          posts\n        })))));\n      }, {\n        dispatch: true\n      });\n      this.loadUserPostsEffect$ = createEffect(() => this.actions$.pipe(ofType(getpostsByUserAction), mergeMap(user => this.postsService.getPostsByUser(user.user).pipe(map(posts => changeUserPostsAction({\n        posts\n      }))))), {\n        dispatch: true\n      });\n      this.loadMostEngagedWithposts$ = createEffect(() => this.actions$.pipe(ofType(getMostEngagedWithPostsAction), mergeMap(() => this.postsService.getMostEngagedWithPosts().pipe(map(posts => changeMostEngagedWithPostsAction({\n        posts\n      }))))), {\n        dispatch: true\n      });\n      this.changeCurrentPage$ = createEffect(() => this.actions$.pipe(ofType(getPageResults), mergeMap(pageNum => this.postsService.getPostsByTag(this.postsService.currentTag, pageNum.newPage).pipe(map(posts => changePostsAction({\n        posts\n      }))))));\n      console.log(\"postojim!\");\n    }\n\n  }\n\n  AppEffects.ɵfac = function AppEffects_Factory(t) {\n    return new (t || AppEffects)(i0.ɵɵinject(i1.UserDataManagerService), i0.ɵɵinject(i2.PostServiceService), i0.ɵɵinject(i3.Actions));\n  };\n\n  AppEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppEffects,\n    factory: AppEffects.ɵfac\n  });\n  return AppEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}